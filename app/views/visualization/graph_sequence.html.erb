<script type="text/javascript" src="/assets/raphael.js"></script>
<script type="text/javascript" src="/assets/dracula_graffle.js"></script>
<script type="text/javascript" src="/assets/dracula_graph.js"></script>
<h1> Cosine Graph Visualization </h1>

<div id="canvas" style="height: 600px; width: 1400px"></div>
<button id="redraw" onclick="redraw();">redraw</button>


<script>
	var redraw;

/* only do all this when document has finished loading (needed for RaphaelJS) */
window.onload = function() {
        var width = 1400;
        var height = 600;
        var g = new Graph();
        g.addNode("d1a7.allKeys",{
            fill: "blue"
          }
        );
        g.addNode("d1au.allKeys",{
          fill: "blue"
        });
        g.addNode("d1dl.allKeys",{
          fill: "blue"
        });
        g.addNode("d1h8.allKeys",{
          fill: "blue"
        });
        g.addNode("d1lt.allKeys",{
          fill: "blue"
        });
        g.addNode("d1q3.allKeys",{
          fill: "blue"
        });
        $.ajax({
		 url: "/visualization/loadTimeSequence",
		 success: function(response){
                    
                    $.each(response, function( index, value ) {
                       fl_val = parseFloat(value.similarity);
                       if(fl_val > 0.8){
                         fill = '#E01929';
                         width = 1000;
                         console.log(g.nodes["d1q3.allKeys"]);
                       }
                       else{
                         fill = '#9A9FA1';
                         width = 500;
                       }
                       var st = {
                          directed: false,
                          label: value.similarity,
                          //width: width,
                          fill: fill,
                          'label-style' : {
                            'font-size': 10,
                            'fill': "#111166"
                          }
                        };
                        g.addEdge(value.file1, value.file2,st);
                    });
                     /* layout the graph using the Spring layout implementation */
                      var layouter = new Graph.Layout.Spring(g);
                      /* draw the graph using the RaphaelJS draw implementation */
                      var renderer = new Graph.Renderer.Raphael('canvas', g, width, height);
		 }
	});



                  redraw = function() {
                        layouter.layout();
                        renderer.draw();
                   };


                    var render = function(r, n) {
                      var label = r.text(0, 30, n.label).attr({opacity:0});
                      //the Raphael set is obligatory, containing all you want to display
                      var set = r.set()
                        .push(r.rect(-30, -13, 62, 86)
                          .attr({ fill: '#fa8', 'stroke-width': 2, r: 9 })
                        )
                        .push(label);

                      // make the label show only on hover
                      set.hover(
                        function mouseIn() {
                          label.animate({ opacity: 1, 'fill-opacity': 1 }, 500);
                        },
                        function mouseOut() {
                          label.animate({opacity:0},300);
                        }
                      );

                      var tooltip = r.set()
                        .push(
                          r.rect(0, 0, 90, 30).attr({ fill: '#fec', 'stroke-width': 1, r: 9 })
                        ).push(
                          r.text(25, 15, 'overlay').attr({ fill: '#000000' })
                        );
                      for(var i in set.items) {
                        set.items[i].tooltip(tooltip);
                      }
                      //            set.tooltip(r.set().push(r.rect(0, 0, 30, 30).attr({"fill": "#fec", "stroke-width": 1, r : "9px"})).hide());
                      return set;
                    };



  //    g.addNode("Wheat", {
  /* filling the shape with a color makes it easier to be dragged */
  /* arguments: r = Raphael object, n : node object */
  //        shapes : [ {
  //                type: "rect",
  //                x: 10,
  //                y: 10,
  //                width: 25,
  //                height: 25,
  //                stroke: "#f00"
  //            }, {
  //                type: "text",
  //                x: 30,
  //                y: 40,
  //                text: "Dump"
  //            }],
  //        overlay : "<b>Hello <a href=\"http://wikipedia.org/\">World!</a></b>"
  //    });

  var st = {
    directed: true,
    label: 'Label',
    'label-style' : {
      'font-size': 20
    }
  };
};

</script>